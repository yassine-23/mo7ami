// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  extensions = [vector]
}

// NextAuth Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  preferences   UserPreference?
  conversations Conversation[]
  savedAnswers  SavedAnswer[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// User Preferences
model UserPreference {
  id                String   @id @default(cuid())
  userId            String   @unique
  language          String   @default("ar") // ar or fr
  voiceEnabled      Boolean  @default(true)
  autoPlayVoice     Boolean  @default(true)
  voiceGender       String   @default("female") // male or female
  theme             String   @default("light") // light or dark
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

// Conversation History
model Conversation {
  id        String   @id @default(cuid())
  userId    String?
  title     String?
  language  String   @default("ar")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  messages Message[]

  @@index([userId, createdAt])
  @@map("conversations")
}

model Message {
  id             String   @id @default(cuid())
  conversationId String
  role           String   // user or assistant
  content        String   @db.Text
  language       String
  citations      Json?    // Array of citation objects
  voiceUsed      Boolean  @default(false)
  createdAt      DateTime @default(now())

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId, createdAt])
  @@map("messages")
}

// Saved/Bookmarked Answers
model SavedAnswer {
  id        String   @id @default(cuid())
  userId    String
  messageId String
  note      String?  @db.Text
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, messageId])
  @@index([userId])
  @@map("saved_answers")
}

// Legal Document Corpus (for RAG)
model LegalDocument {
  id               String                 @id @default(cuid())
  title            String
  titleAr          String?
  titleFr          String?
  domain           String                 // penal, civil, family, labor, etc.
  documentType     String                 // code, law, decree, etc.
  officialRef      String                 // Dahir number, BO reference
  publicationDate  DateTime?
  language         String                 // ar, fr, or both
  content          String                 @db.Text
  contentAr        String?                @db.Text
  contentFr        String?                @db.Text
  metadata         Json?                  // Additional metadata
  isActive         Boolean                @default(true)
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt

  chunks DocumentChunk[]

  @@index([domain, isActive])
  @@index([officialRef])
  @@map("legal_documents")
}

// Document chunks for vector search
model DocumentChunk {
  id              String   @id @default(cuid())
  documentId      String
  chunkIndex      Int
  content         String   @db.Text
  language        String
  // Vector embedding stored using pgvector extension
  embedding       Unsupported("vector(1536)")?
  articleNumber   String?
  metadata        Json?
  createdAt       DateTime @default(now())

  document LegalDocument @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@unique([documentId, chunkIndex, language])
  @@index([documentId])
  // Vector similarity search index (IVFFlat) - configure directly in PostgreSQL
  // @@index([embedding])
  @@map("document_chunks")
}

// Analytics & Feedback
model QueryAnalytics {
  id           String   @id @default(cuid())
  query        String   @db.Text
  language     String
  domain       String?
  responseTime Int      // milliseconds
  voiceUsed    Boolean  @default(false)
  successful   Boolean  @default(true)
  createdAt    DateTime @default(now())

  @@index([createdAt])
  @@index([domain])
  @@map("query_analytics")
}

model Feedback {
  id        String   @id @default(cuid())
  messageId String
  userId    String?
  rating    Int      // 1-5 stars
  comment   String?  @db.Text
  issueType String?  // incorrect, incomplete, other
  createdAt DateTime @default(now())

  @@index([messageId])
  @@map("feedback")
}
